# -*- coding: utf-8 -*-
#
# Copyright 2018 Roy Liu
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

require "event_flow"
require "spec_helper"

class TestNode
  include EventFlow::Context

  event_flows :create, :destroy

  attr_writer :create_flow_dependencies
  attr_reader :index

  def initialize(index)
    @index = index
    @create_flow_dependencies = []
  end

  def create_flow_dependencies(context)
    @create_flow_dependencies
  end

  def on_create(*args)
    index
  end
end

describe EventFlow do
  let(:root_node) do
    n0 = TestNode.new(0)
    n2 = TestNode.new(2)
    n3 = TestNode.new(3)
    n1 = TestNode.new(1)

    n0.create_flow_dependencies = [n2, n3]
    n2.create_flow_dependencies = [n1]
    n3.create_flow_dependencies = [n1]

    n0
  end

  it "#{TestNode} has autogenerated subscriber methods" do
    expect(root_node).to respond_to(:create_flow_subscribers)
    expect(root_node).to respond_to(:destroy_flow_subscribers)
  end

  it "topologically sorts the subscribers" do
    expect(
        root_node.publish(:create).map do |node|
          node.index
        end
    ).to eq([1, 2, 3, 0])
  end

  it "accepts a block argument for `publish`" do
    indices = []

    root_node.publish(:create) do |index|
      indices.push(index)
    end

    expect(indices).to eq([1, 2, 3, 0])
  end
end
